"""Add enhanced models for admin and instructor features

Revision ID: bdacb2588e22
Revises: 4d60dd6451b8
Create Date: 2025-08-14 18:40:11.583533

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bdacb2588e22'
down_revision: Union[str, Sequence[str], None] = '4d60dd6451b8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create enum types first
    userrole_enum = sa.Enum('ADMIN', 'INSTRUCTOR', 'STUDENT', name='userrole')
    userrole_enum.create(op.get_bind())
    
    lessonstatus_enum = sa.Enum('SCHEDULED', 'COMPLETED', 'CANCELLED', 'RESCHEDULED', name='lessonstatus')
    lessonstatus_enum.create(op.get_bind())
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key')
    )
    op.create_index(op.f('ix_system_settings_id'), 'system_settings', ['id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=True),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.add_column('lessons', sa.Column('created_by', sa.Integer(), nullable=True))
    op.add_column('lessons', sa.Column('instructor_notes', sa.Text(), nullable=True))
    op.add_column('lessons', sa.Column('admin_notes', sa.Text(), nullable=True))
    op.add_column('lessons', sa.Column('cost', sa.Float(), nullable=True))
    op.add_column('lessons', sa.Column('location', sa.String(), nullable=True))
    op.add_column('lessons', sa.Column('room_number', sa.String(), nullable=True))
    op.add_column('lessons', sa.Column('materials_needed', sa.Text(), nullable=True))
    op.add_column('lessons', sa.Column('homework_assigned', sa.Text(), nullable=True))
    op.add_column('lessons', sa.Column('progress_notes', sa.Text(), nullable=True))
    
    # Update existing status values to match enum values
    op.execute("UPDATE lessons SET status = 'SCHEDULED' WHERE status = 'scheduled'")
    op.execute("UPDATE lessons SET status = 'COMPLETED' WHERE status = 'completed'")
    op.execute("UPDATE lessons SET status = 'CANCELLED' WHERE status = 'cancelled'")
    
    op.alter_column('lessons', 'status',
               existing_type=sa.VARCHAR(),
               type_=lessonstatus_enum,
               existing_nullable=True,
               postgresql_using='status::lessonstatus')
    op.create_foreign_key(None, 'lessons', 'users', ['created_by'], ['id'])
    op.add_column('users', sa.Column('role', userrole_enum, nullable=True))
    op.add_column('users', sa.Column('address', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('emergency_contact', sa.String(), nullable=True))
    op.add_column('users', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('hourly_rate', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('specializations', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
    
    # Set default role for existing users
    op.execute("UPDATE users SET role = 'STUDENT' WHERE role IS NULL AND is_teacher = false")
    op.execute("UPDATE users SET role = 'INSTRUCTOR' WHERE role IS NULL AND is_teacher = true")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'specializations')
    op.drop_column('users', 'hourly_rate')
    op.drop_column('users', 'notes')
    op.drop_column('users', 'emergency_contact')
    op.drop_column('users', 'address')
    op.drop_column('users', 'role')
    op.drop_constraint(None, 'lessons', type_='foreignkey')
    op.alter_column('lessons', 'status',
               existing_type=sa.Enum('SCHEDULED', 'COMPLETED', 'CANCELLED', 'RESCHEDULED', name='lessonstatus'),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('lessons', 'progress_notes')
    op.drop_column('lessons', 'homework_assigned')
    op.drop_column('lessons', 'materials_needed')
    op.drop_column('lessons', 'room_number')
    op.drop_column('lessons', 'location')
    op.drop_column('lessons', 'cost')
    op.drop_column('lessons', 'admin_notes')
    op.drop_column('lessons', 'instructor_notes')
    op.drop_column('lessons', 'created_by')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_system_settings_id'), table_name='system_settings')
    op.drop_table('system_settings')
    # ### end Alembic commands ###
